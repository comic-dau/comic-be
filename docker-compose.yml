version: '3.8'

services:
  # Your Python application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: comic_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - minio
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - STORAGE_URL=minio:9000
      - STORAGE_ACCESS_KEY=${STORAGE_ACCESS_KEY}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY}
      - STORAGE_BUCKET=${STORAGE_BUCKET}
      - STORAGE_SECURE=False
    networks:
      - comic_network
    volumes:
      - ./:/app
    # Use the CMD from Dockerfile

  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: comic_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - comic_network

  minio:
    image: minio/minio
    container_name: comic_minio
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"  # MinIO Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - comic_network

  # Create the initial bucket
  minio-mc:
    image: minio/mc
    container_name: comic_minio_mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      mc config host add myminio http://minio:9000 ${STORAGE_ACCESS_KEY} ${STORAGE_SECRET_KEY} &&
      mc mb --ignore-existing myminio/${STORAGE_BUCKET} &&
      mc anonymous set download myminio/${STORAGE_BUCKET} &&
      exit 0
      "
    networks:
      - comic_network

networks:
  comic_network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
